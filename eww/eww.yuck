(defwidget bar []
  (centerbox :orientation "h"
    (_workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ðŸ”Š"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "ï¡š"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "ðŸ’¾"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    time))


(deflisten workspaces :initial
    "[]" "~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial
    "..." "~/.config/eww/scripts/get-active-workspace")
(deflisten urgent_workspace :initial
    "..." "~/.config/eww/scripts/get-urgent-workspaces")

(defvar caw "~/.config/eww/scripts/change-active-workspace")
(defvar goto_w "hyprctl dispatch workspace")



(defwidget _workspaces []
(eventbox
    :onscroll "${caw} {} ${current_workspace}"
    :class "workspaces-widget"
    (box :space-evenly false

    (label
        :text "${workspaces}${current_workspace}${urgent_workspace}"
        :visible false)
        (for workspace in workspaces
            (literal :content
                {workspace.data.windows > 0 || workspace.id == current_workspace ?
                    "(eventbox :onclick '${goto_w} ${workspace.id}'
                        (box :class 'workspace-entry 
                        ${workspace.id == current_workspace ? 'current' : ''}
                        ${workspace.id == urgent_workspace ? 'urgent' : ''}'
                        (label :text '${workspace.data.name}')
                        ))" : ""})))))


(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
    :monitor 0
    :stacking "fg"
    :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
    :reserve (struts :side "top" :distance "4%")
    :exclusive true
    (bar))

