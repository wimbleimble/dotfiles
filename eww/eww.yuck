(defwidget bar []
  (centerbox :orientation "h"
    (_workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label ""
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (box :halign "end" :class "status memory" (label :class "icon" :text "") (label :text "${round(EWW_RAM.used_mem_perc, 0)}%"))
    (box :halign "end" :class "status cpu" (label :class "icon" :text "󰍛") (label :text "${round(EWW_CPU.avg, 0)}%"))
    (systray :orientation "h"
             :icon-size 15
             :class "bubble systray"
             :spacing 12)
    (label :class "bubble clock" :text time)))


(deflisten workspaces :initial
    "[]" "~/.config/eww/scripts/hypr-eww.py --watch get")
(deflisten current_workspace :initial
    "..." "~/.config/eww/scripts/get-active-workspace")
(deflisten urgent_workspace :initial
    "..." "~/.config/eww/scripts/get-urgent-workspaces")

(defvar caw "~/.config/eww/scripts/change-active-workspace")
(defvar goto_w "hyprctl dispatch workspace")



(defwidget _workspaces []
(eventbox
    :onscroll "${caw} {} ${current_workspace}"
    :class "workspaces-widget"
    :halign "start"
    (box :space-evenly true :class "workspaces" :halign "start"
        (for workspace in workspaces
            (eventbox :onclick '${goto_w} ${workspace.id}'
                (box :class '${workspace.id == current_workspace ? 'current' : ''}${workspace.id == urgent_workspace ? 'urgent' : ''} workspace-entry'
                    :width 50
                    (label :text '${workspace.name}')
                ))))))


(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? " ~ ${music} ~ " : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "bubble metric"
       :space-evenly false
    (box :class "icon" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
    :monitor 0
    :stacking "fg"
    :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
    :reserve (struts :side "top" :distance "4%")
    :exclusive true
    (bar))

